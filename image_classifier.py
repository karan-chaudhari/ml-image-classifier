# -*- coding: utf-8 -*-
"""image_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KU2RswOaz0eftXc3kxlLDvm2cPgWBlHG
"""

# Description : This program classifies images

from keras.datasets import cifar10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

print(type(x_train))
print(type(y_train))
print(type(x_test))
print(type(y_test))

# Get the shapes
print('x_train shape : ', x_train.shape)
print('y_train shape : ', y_train.shape)
print('x_test shape : ', x_test.shape)
print('y_test shape : ', y_test.shape)

# Take a look at the first image (at index=0) in the training data set
x_train[0]

# Show image as picture
import matplotlib.pyplot as plt
img = plt.imshow(x_train[0])

# Print the label of image
print('The label is : ', y_train[0])

# One-Hot Encoding: Convert the labels into a set of 10 numbers to input into the neural network
from keras.utils import to_categorical
y_train_one_hot = to_categorical(y_train) 
y_test_one_hot = to_categorical(y_test)

# Print the new labels in the training data set
print(y_train_one_hot)

# Print an example of new labels
print('The one hot label is : ', y_train_one_hot[0])

# Normalize the pixels in the images to be values between 0 and 1
x_train = x_train/255
x_test = x_test/255

# Build the CNN
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D

# Create the architecture
model = Sequential()

# Convolution layer 
model.add( Conv2D(32, (5,5), activation='relu', input_shape=(32,32,3)) )

# MaxPooling layer
model.add( MaxPooling2D(pool_size=(2,2)) )

# Convolution layer 
model.add( Conv2D(32, (5,5), activation='relu') )

# MaxPooling layer
model.add( MaxPooling2D(pool_size=(2,2)) )

#Flatten layer
model.add( Flatten() )

model.add( Dense(1000, activation='relu') )
model.add( Dense(10, activation='softmax'))

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
hist = model.fit(x_train, y_train_one_hot, batch_size=256, epochs=10, validation_split=0.3)

# Get the model accuracy
model.evaluate(x_test, y_test_one_hot)[1]

# Visualize the model accuracy
plt.plot(hist.history['acc']) 
plt.plot(hist.history['val_acc'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Val'], loc='upper left')
plt.show()

# Visualize the model loss
plt.plot(hist.history['loss']) 
plt.plot(hist.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','Val'], loc='upper right')
plt.show()

# Load the data
from google.colab import files
uploaded = files.upload()
my_image = plt.imread('pug-690566_1920.jpg')

img = plt.imshow(my_image)

# Resize the image
from skimage.transform import resize
my_image_resized = resize(my_image, (32,32,3))
img = plt.imshow(my_image_resized)

# Get the probabilities for each class
import numpy as np
probabilities = model.predict(np.array([my_image_resized,]))

# Print the probabilities
probabilities

number_to_class = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
index = np.argsort(probabilities[0,:])
print('Most likely class : ', number_to_class[index[9]], '--probabilty', probabilities[0, index[9]])
print('Second most likely class : ', number_to_class[index[8]], '--probabilty', probabilities[0, index[8]])
print('Third most likely class : ', number_to_class[index[7]], '--probabilty', probabilities[0, index[7]])
print('Fourth most likely class : ', number_to_class[index[6]], '--probabilty', probabilities[0, index[6]])
print('Fifth most likely class : ', number_to_class[index[5]], '--probabilty', probabilities[0, index[5]])

# Save the model
model.save('my_model.h5')

# Load the model
from keras.models import load_model
model = load_model('my_model.h5')

